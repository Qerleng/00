name: Rule Provider

on:
  schedule:
    - cron: '0 */3 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: 
          python -m pip install --upgrade pip
          pip install pandas requests tldextract pyyaml openpyxl
          
      - name: rule providers
        working-directory: ./rule_provider
        run: |
          echo "Downloading oisd full source list..."
          curl -sSf -o oisd-full.txt https://big.oisd.nl/
          python3 - <<EOF
          import re
          import yaml
          
          with open("oisd-full.txt", "r") as file:
              input_text = file.read()
          payload_lines = re.findall(r"\|\|(.+)\^", input_text)
          domains = []
          for line in payload_lines:
            if line:
              domain = line.split("$")[0].strip()
            if any(prefix in domain for prefix in ("autodesk", "github", "tiktok", "pinterest", "pinimg", "twitter", "linkedin", "telegram", "facebook", "line", "instagram", "whatsapp")):
              continue
            else:
                domains.append("DOMAIN-SUFFIX," + domain)

          payload = [f"{line}" for line in domains]
          
          data = {
              "payload": payload
          }
          
          yaml_output = yaml.dump(data, sort_keys=False, default_flow_style=False)
          
          formatted_yaml = re.sub(r"(\s+-) '(.+)'", r"\1 \2", yaml_output)
          
          with open("rule_basicads.yaml", "w") as file:
              file.write(formatted_yaml)
          EOF
          rm oisd-full.txt
          
          echo "Downloading oisd nsfw source list..."
          curl -sSf -o oisd-nsfw.txt https://nsfw.oisd.nl
          python3 - <<EOF
          import re
          import yaml
          
          with open("oisd-nsfw.txt", "r") as file:
              input_text = file.read()
          
          payload_lines = re.findall(r"\|\|(.+)\^", input_text)

          domains = []
          for line in payload_lines:
            if line:
              domain = line.split("$")[0].strip()
            if any(prefix in domain for prefix in ("autodesk", "github", "tiktok", "pinterest", "pinimg", "twitter", "linkedin", "telegram", "facebook", "line", "instagram", "whatsapp")):
              continue
            else:
                domains.append("DOMAIN-SUFFIX," + domain)

          payload = [f"{line}" for line in domains]
          
          data = {
              "payload": payload
          }
          
          yaml_output = yaml.dump(data, sort_keys=False, default_flow_style=False)
          
          formatted_yaml = re.sub(r"(\s+-) '(.+)'", r"\1 \2", yaml_output)
          
          with open("rule_nsfw.yaml", "w") as file:
              file.write(formatted_yaml)
          EOF
          rm oisd-nsfw.txt
          

          echo "Downloading Malicious Sites source list..."
          curl -sSf -o rule-malicious.txt https://raw.githubusercontent.com/elliotwutingfeng/Inversion-DNSBL-Blocklists/main/Google_hostnames_ABP.txt
          python3 - <<EOF
          import re
          import yaml
          
          with open("rule-malicious.txt", "r") as file:
              input_text = file.read()
          payload_lines = re.findall(r"\|\|(.+)\^", input_text)

          domains = []
          for line in payload_lines:
            if line:
              domain = line.split("$")[0].strip()
            if any(prefix in domain for prefix in ("autodesk", "github", "tiktok", "pinterest", "pinimg", "twitter", "linkedin", "telegram", "facebook", "line", "instagram", "whatsapp")):
              continue
            else:
                domains.append("DOMAIN-SUFFIX," + domain)

          payload = [f"{line}" for line in domains]
          
          data = {
              "payload": payload
          }
          
          yaml_output = yaml.dump(data, sort_keys=False, default_flow_style=False)
          
          formatted_yaml = re.sub(r"(\s+-) '(.+)'", r"\1 \2", yaml_output)
          
          with open("rule_malicious.yaml", "w") as file:
              file.write(formatted_yaml)
          EOF
          rm rule-malicious.txt

          echo "Downloading Malicious IP Addresses source list..."
          curl -sSf -o rule-maliciousip.txt https://raw.githubusercontent.com/elliotwutingfeng/Inversion-DNSBL-Blocklists/main/Google_ipv4.txt
          python3 - <<EOF
          import re
          import yaml
          import ipaddress
          
          with open("rule-maliciousip.txt", "r") as file:
              input_text = file.read()
          payload_lines = re.findall(r"(.+)", input_text)
          domains = []
          ips = []
          for line in payload_lines:
            if line:
                if line[0].isdigit():
                    try:
                        ip = ipaddress.ip_network(line.strip().split('$')[0])
                        ips.append(ip.with_prefixlen)
                    except ValueError:
                        pass
                else:
                    domain = line.split("$")[0].strip()

                       
          rules = domains + ["IP-CIDR," + ip for ip in ips]
          payload = [f"{line}" for line in rules]
          
          data = {
              "payload": payload
          }
          
          yaml_output = yaml.dump(data, sort_keys=False, default_flow_style=False)
          
          formatted_yaml = re.sub(r"(\s+-) '(.+)'", r"\1 \2", yaml_output)
          
          with open("rule_maliciousip.yaml", "w") as file:
              file.write(formatted_yaml)
          EOF
          rm rule-maliciousip.txt

          echo "Downloading Personal_ads source list..."
          curl -sSf -o Personal_ads.txt https://raw.githubusercontent.com/d3ward/toolz/master/src/d3host.txt
          python3 - <<EOF
          import re
          import yaml
          
          with open("Personal_ads.txt", "r") as file:
              input_text = file.read()
          
          payload_lines = re.findall(r"0.0.0.0 (.+)", input_text)

          domains = []
          for line in payload_lines:
            if line:
              domain = line.split("$")[0].strip()
            if any(prefix in domain for prefix in ("autdsk", "gthub")):
              continue
            else:
                domains.append("DOMAIN," + domain)


          payload = [f"{line}" for line in domains]
          
          data = {
              "payload": payload
          }
          
          yaml_output = yaml.dump(data, sort_keys=False, default_flow_style=False)
          
          formatted_yaml = re.sub(r"(\s+-) '(.+)'", r"\1 \2", yaml_output)
          
          with open("Personal_ads.yaml", "w") as file:
              file.write(formatted_yaml)
          EOF
          rm Personal_ads.txt

          echo "Downloading Category-Porn source list..."
          curl -sSf -o rule_18+.txt https://raw.githubusercontent.com/dreamoeu/V2rayDomains2Clash/generated/category-porn.yaml
          python3 - <<EOF
          import re
          import yaml
          
          with open("rule_18+.txt", "r") as file:
              input_text = file.read()
          
          payload_lines = re.findall(r'- "+..(.+)"', input_text)

          domains = []
          for line in payload_lines:
            if line:
              domain = line.split("$")[0].strip()
            if any(prefix in domain for prefix in ("autodesk", "github", "tiktok", "pinterest", "pinimg", "twitter", "linkedin", "telegram", "facebook", "line", "instagram", "whatsapp")):
              continue
            else:
                domains.append("DOMAIN-SUFFIX," + domain)


          payload = [f"{line}" for line in domains]
          
          data = {
              "payload": payload
          }
          
          yaml_output = yaml.dump(data, sort_keys=False, default_flow_style=False)
          
          formatted_yaml = re.sub(r"(\s+-) '(.+)'", r"\1 \2", yaml_output)
          
          with open("rule_18+.yaml", "w") as file:
              file.write(formatted_yaml)
          EOF
          rm rule_18+.txt
      - name: Building binary files
        run: |
          UPX_VER=$(curl -s https://api.github.com/repos/upx/upx/releases/latest |
              grep tag_name |
              cut -d ":" -f2 |
              sed 's/\"//g;s/\,//g;s/\ //g;s/v//' |
              head -n 1)

          curl -Lo upx.tar.xz "https://github.com/upx/upx/releases/download/v$UPX_VER/upx-$UPX_VER-amd64_linux.tar.xz"
          tar -xvf upx.tar.xz
          rm upx.tar.xz
          mv -f upx-$UPX_VER-amd64_linux/upx .
          rm -rf upx-$UPX_VER-amd64_linux/*
          
          SINGBOX_VER=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases |
              grep '"prerelease": true,' -B 10 -m 1 |
              grep tag_name |
              cut -d ":" -f2 |
              sed 's/\"//g;s/\,//g;s/\ //g;s/v//')

          curl -Lo sing-box.tar.gz "https://github.com/SagerNet/sing-box/releases/download/v$SINGBOX_VER/sing-box-$SINGBOX_VER-linux-amd64.tar.gz"
          tar -zxvf sing-box.tar.gz -C sing-box
          rm sing-box.tar.gz
          mv -f sing-box/sing-box-$SINGBOX_VER-linux-amd64/sing-box sing-box/
          rm -rf sing-box/sing-box-$SINGBOX_VER-linux-amd64/*
          
          chmod +x ./upx
          ./upx --best sing-box/sing-box
          rm upx
          cd sing-box
          echo $SINGBOX_VER >README.md

      - name: Run script convert rule provider
        working-directory: ./sing-box
        run: python data/convert.py
      - name: move rule sing-box
        working-directory: ./sing-box
        run: |
          chmod +x sing-box
          for item in *.json; do
              ./sing-box rule-set compile "$item"
              mkdir -p ./rule_json/
              mkdir -p ./rule_srs/
              mv "${item%.json}.srs" rule_srs/
              mv "$item" rule_json/
              rm sing-box
              rm *.json *.srs
          done
      - uses: MyAlbum/purge-cache@v2
        with:
          token: ${{ github.token }}
          debug: true
      - uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 3
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Automatic update Rule Provider


          
